#!/usr/bin/env ts-node

/**
 * Script para Resetar e Popular o Banco de Dados
 * 
 * Este script:
 * 1. Limpa todos os dados existentes
 * 2. Popula com dados de exemplo
 * 
 * ‚ö†Ô∏è ATEN√á√ÉO: Remove TODOS os dados existentes!
 * Use apenas em ambiente de desenvolvimento.
 */

import 'dotenv/config';
import { clearEvents, clearUsers, clearTickets, verifyEmptyDatabase } from './clear-database';
import { populateEvents, populateUsers, populateTickets, verifyData } from './populate-database';
import { validateEnvironment } from '../db';

// Fun√ß√£o para resetar o banco
async function resetDatabase(): Promise<void> {
  console.log('üóëÔ∏è Resetando banco de dados...');
  
  try {
    // Limpar dados na ordem correta
    const ticketsDeleted = await clearTickets();
    const usersDeleted = await clearUsers();
    const eventsDeleted = await clearEvents();

    console.log(`‚úÖ Reset conclu√≠do: ${eventsDeleted} eventos, ${usersDeleted} usu√°rios, ${ticketsDeleted} tickets removidos`);
    
    // Verificar se est√° vazio
    await verifyEmptyDatabase();
  } catch (error) {
    console.error('‚ùå Erro durante o reset:', error);
    throw error;
  }
}

// Fun√ß√£o para popular o banco
async function populateDatabase(): Promise<void> {
  console.log('üå± Populando banco de dados...');
  
  try {
    const events = await populateEvents();
    const users = await populateUsers();
    const tickets = await populateTickets(events, users);

    console.log(`‚úÖ Popula√ß√£o conclu√≠da: ${events.length} eventos, ${users.length} usu√°rios, ${tickets.length} tickets criados`);
    
    // Verificar dados criados
    await verifyData();
  } catch (error) {
    console.error('‚ùå Erro durante a popula√ß√£o:', error);
    throw error;
  }
}

// Fun√ß√£o principal
async function main() {
  console.log('üîÑ RESET E POPULA√á√ÉO DO BANCO DE DADOS');
  console.log('========================================');
  console.log('‚ö†Ô∏è  ATEN√á√ÉO: Isso vai remover TODOS os dados existentes!');
  console.log('');

  // Verificar ambiente
  const environment = process.env.NODE_ENV || 'development';
  if (environment === 'production') {
    console.log('üö´ Opera√ß√£o n√£o permitida em produ√ß√£o!');
    console.log('Para for√ßar, defina NODE_ENV=development');
    process.exit(1);
  }

  console.log(`üåç Ambiente: ${environment}`);
  console.log('');

  // Confirma√ß√£o do usu√°rio
  console.log('‚è∞ Aguardando 15 segundos para cancelar (Ctrl+C)...');
  console.log('');

  try {
    // Aguardar 15 segundos para dar chance de cancelar
    await new Promise(resolve => setTimeout(resolve, 15000));
  } catch (error) {
    console.log('‚ùå Opera√ß√£o cancelada pelo usu√°rio');
    process.exit(0);
  }

  console.log('üöÄ Iniciando reset e popula√ß√£o...');
  console.log('');

  try {
    // Validar ambiente
    console.log('üîß Validando configura√ß√µes...');
    validateEnvironment();
    console.log('‚úÖ Configura√ß√µes validadas!');

    // Resetar banco
    await resetDatabase();

    console.log('\n' + '='.repeat(50) + '\n');

    // Popular banco
    await populateDatabase();

    console.log('\nüéâ Reset e popula√ß√£o conclu√≠dos com sucesso!');
    console.log('‚ú® Seu banco de dados est√° pronto para uso!');

  } catch (error) {
    console.error('\n‚ùå Erro durante a opera√ß√£o:', error);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(console.error);
}

export {
  resetDatabase,
  populateDatabase
};
